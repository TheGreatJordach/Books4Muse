version: 2.1

orbs:
  codecov: codecov/codecov@4.0.1
upload-to-codecov:
  jobs:
    - checkout
    - codecov/upload

executors:
  node-executor:
    docker:
      - image: node:20 # Replace with a compatible Node.js version
    working_directory: ~/repo

jobs:
  install-dependencies:
    executor: node-executor
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            npm install -g pnpm  # Install pnpm globally
            pnpm install          # Install project dependencies
            npm install -g nx     # Install Nx globally

            # To speed up your builds, you can add caching for dependencies, like pnpm, node_modules, and dist,
            # to avoid re-installing dependencies on every build. Here's an example:
      - save_cache:
          paths:
            - ~/.pnpm-store
            - node_modules
          key: v1-dependencies-{{ checksum "pnpm-lock.yaml" }}
  lint-angular:
    executor: node-executor
    steps:
      - checkout
      - run:
          name: Lint the Code
          command: |
            npx nx lint --project=ui

  lint-nestjs:
    executor: node-executor
    steps:
      - checkout
      - run:
          name: Lint the Code
          command: |
            npx nx lint --project=api

  build-angular:
    executor: node-executor
    steps:
      - checkout
      - run:
          name: Build the Project
          command: |
            pnpm run build ui --prod

  build-nestjs:
    executor: node-executor
    steps:
      - checkout
      - run:
          name: Build the Project
          command: |
            pnpm run build api --prod

  test-angular:
    executor: node-executor
    steps:
      - checkout
      - run:
          name: Run Tests
          command: |
            npx nx test ui

  test-nestjs:
    executor: node-executor
    steps:
      - checkout
      - run:
          name: Run Tests
          command: |
            npx nx test api

  generate-docs:
    executor: node-executor
    steps:
      - checkout
      - run:
          name: Generate Documentation
          command: |
            npx nx compodoc:all
      - run:
          name: Upload Documentation Artifacts
          command: |
            mkdir -p /tmp/docs
            cp -r dist/docs /tmp/docs
      - store_artifacts:
          path: /tmp/docs
          destination: docs

  sonarcloud:
    executor: node-executor
    steps:
      - checkout
      - run:
          name: SonarCloud Analysis
          command: |
            # Install SonarCloud Scanner
            pnpm install -g sonar-scanner

            # Run SonarCloud analysis
            sonar-scanner \
              -Dsonar.projectKey=$SONAR_PROJECT_KEY \
              -Dsonar.organization=$SONAR_ORG \
              -Dsonar.sources=src \
              -Dsonar.tests=src \
              -Dsonar.test.inclusions=**/*.spec.ts \
              -Dsonar.language=ts \
              -Dsonar.typescript.tsconfigPath=tsconfig.json \
              -Dsonar.host.url=https://sonarcloud.io

      - checkout
      - run:
          name: Upload Coverage to SonarCloud
          command : |
                  npx sonar-scanner
  migrate:
    executor: node-executor
    steps:
      - checkout
      - run:
          name: Run Migrations
          command: |
            pnpm run migrate # Assuming 'migrate' script is defined for database migrations

  create-deployment-branch:
    executor: node-executor
    steps:
      - checkout
      - run:
          name: Create Deployment Branch
          command: |
            DEPLOYMENT_BRANCH="deploy-$(date +%Y%m%d%H%M%S)"
            git checkout -b $DEPLOYMENT_BRANCH
            git push origin $DEPLOYMENT_BRANCH
            echo "Deployment branch created: $DEPLOYMENT_BRANCH"
            echo "DEPLOYMENT_BRANCH=$DEPLOYMENT_BRANCH" >> $BASH_ENV

  deploy-to-render-angular:
    executor: node-executor
    steps:
      - checkout
      - run:
          name: Deploy Angular App to Render
          command: |
            echo "Deploying Angular App to Render..."
            # Add Render deployment commands here (e.g., using Render CLI or GitHub Actions)

  deploy-to-render-nestjs:
    executor: node-executor
    steps:
      - checkout
      - run:
          name: Deploy NestJS API to Render
          command: |
            echo "Deploying NestJS API to Render..."
            # Add Render deployment commands here (e.g., using Render CLI or GitHub Actions)

  delete-deployment-branch:
    executor: node-executor
    steps:
      - checkout
      - run:
          name: Delete Deployment Branch
          command: |
            git branch -D $DEPLOYMENT_BRANCH
            git push origin --delete $DEPLOYMENT_BRANCH
            echo "Deployment branch deleted: $DEPLOYMENT_BRANCH"

  deploy:
    executor: node-executor
    steps:
      - checkout
      - run:
          name: Deploy to Production
          command: |
            echo "App is Successfully deployed..."

workflows:
  version: 2
  build-and-deploy:
    jobs:
      - install-dependencies
      - lint-angular:
          requires:
            - install-dependencies
      - lint-nestjs:
          requires:
            - install-dependencies
      - build-angular:
          requires:
            - lint-angular
      - build-nestjs:
          requires:
            - lint-nestjs
      - test-angular:
          requires:
            - build-angular
      - test-nestjs:
          requires:
            - build-nestjs
      - upload-to-codecov:
          requires:
            - test-angular
            - test-nestjs
      - sonarcloud:
          requires:
            - test-angular
            - test-nestjs
      - generate-docs:
          requires:
            - test-angular
            - test-nestjs
      - serve-api:
          requires:
            - test-nestjs
      - serve-ui:
          requires:
            - test-angular
      - migrate:
          requires:
            - serve-api
            - serve-ui
      - create-deployment-branch:
          requires:
            - migrate
      - deploy-to-render-angular:
          requires:
            - create-deployment-branch
      - deploy-to-render-nestjs:
          requires:
            - create-deployment-branch
      - deploy:
          requires:
            - deploy-to-render-angular
            - deploy-to-render-nestjs
      - delete-deployment-branch:
          requires:
            - deploy
